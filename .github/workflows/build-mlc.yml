name: Build MacOS Linux Windows Debug

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        build_type: [Debug]
        include:
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Unshallow vcpkg
        run: git fetch --unshallow
        working-directory: vcpkg
        shell: bash

      - name: Set build output directory
        id: vars
        shell: bash
        run: echo "dir=${{ github.workspace }}/build" >> $GITHUB_OUTPUT

      # Nur Linux: Build-Essentials installieren
      - name: Install build tools (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y build-essential

      # Install cppcheck (Linux/macOS only)

      # Vcpkg bootstrappen je nach OS
      - name: Bootstrap vcpkg (Windows)
        if: runner.os == 'Windows'
        run: .\vcpkg\bootstrap-vcpkg.bat
        working-directory: ${{ github.workspace }}

      - name: Bootstrap vcpkg (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          chmod +x ./vcpkg/bootstrap-vcpkg.sh
          ./vcpkg/bootstrap-vcpkg.sh
        working-directory: ${{ github.workspace }}

      # Cache für vcpkg
      - name: Cache vcpkg build trees and installed packages
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/vcpkg/installed
            ${{ github.workspace }}/vcpkg/buildtrees
          key: ${{ runner.os }}-vcpkg-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-

      # Dependencies installieren
      - name: Install dependencies with vcpkg
        run: ./vcpkg/vcpkg install fmt boost-beast boost-asio spdlog nlohmann-json
        working-directory: ${{ github.workspace }}
        shell: bash

      # CMake konfigurieren
      - name: Configure CMake
        run: >
          cmake -B "${{ steps.vars.outputs.dir }}"
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake"
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
      # Bauen
      - name: Build
        run: cmake --build "${{ steps.vars.outputs.dir }}" --config ${{ matrix.build_type }}

      # Tests ausführen
      - name: Test
        working-directory: "${{ steps.vars.outputs.dir }}"
        run: ctest --build-config ${{ matrix.build_type }}
